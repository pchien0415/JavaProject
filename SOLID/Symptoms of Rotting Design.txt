Symptoms of Rotting Design

-Rigidity
    程式一旦被改動，即使是很小的改動，也會造成一連串的程式跟著被影響。
    然而若是太怕造成這種效應，而拒絕改動，則會造成使用者不便，使用者一
    旦使用了這種程式，接下來只能繼續使用，要捨棄則得整個捨棄，這樣的結
    果不符合效益，故這是個糟糕的設計。

-Fragility
    如上面所說的，程式改動往往容易造成一些損壞，而為了修復著些錯誤時，
    又是在做改動，因此又有可能造成了一些損壞，因此只會有越修復越遭告的
    情況。然而經常性的發生這些損壞時，會導致使用者對這套軟件的不信任。

-Immobility
    當我們在撰寫程式時，經常會遇到自己想撰寫的模組和另一位工程師已寫完的
    模組很相似，這時候我們就會想要reuse這個模組。但是此時我們卻發現這個
    模組所依賴的baggage(ex: baggage 可能是當時工程師在撰寫這個模組時所
    寫的一些相關模組，這些模組之間可能有繼承關係，所以要使用此模組可能又
    要追溯到他的父類...由此可知這是一個很繁雜的工作)太多導致我們需要花很
    多時間去去辨別哪些部分的軟件是我們想要的，哪些是我們不要的，而在做這
    個分離的動作時很有可能導致很多錯誤及不必要的風險，因此工程師會放棄
    reuse這個模塊乾脆直接自己重新寫一個模組。

-Viscosity
    黏度來自兩個方面：設計黏度與環境黏度。當需要對軟件做更改時，工程師可
    以選擇保留或是不保留設計的更改方法。而當保存設計的方法比不保存的方法
    還難實行的時候，則稱＂該設計的黏度很高＂。當開發環境很慢而且效率很低
    時，則會產生環境的黏度。例如若編譯時間很長，工程師會傾向做不用大量重
    新編譯的更改，就算這種更改方式在設計的角度上看不是最佳的。
    